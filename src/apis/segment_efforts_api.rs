/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`get_efforts_by_segment_id`]
#[derive(Clone, Debug, Default)]
pub struct GetEffortsBySegmentIdParams {
    /// The identifier of the segment.
    pub segment_id: i32,
    /// ISO 8601 formatted date time.
    pub start_date_local: Option<String>,
    /// ISO 8601 formatted date time.
    pub end_date_local: Option<String>,
    /// Number of items per page. Defaults to 30.
    pub per_page: Option<i32>,
}

/// struct for passing parameters to the method [`get_segment_effort_by_id`]
#[derive(Clone, Debug, Default)]
pub struct GetSegmentEffortByIdParams {
    /// The identifier of the segment effort.
    pub id: i64,
}

/// struct for typed successes of method [`get_efforts_by_segment_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEffortsBySegmentIdSuccess {
    Status200(Vec<crate::models::DetailedSegmentEffort>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_segment_effort_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentEffortByIdSuccess {
    Status200(crate::models::DetailedSegmentEffort),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_efforts_by_segment_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEffortsBySegmentIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_segment_effort_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentEffortByIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.
pub async fn get_efforts_by_segment_id(
    configuration: &configuration::Configuration,
    params: GetEffortsBySegmentIdParams,
) -> Result<ResponseContent<GetEffortsBySegmentIdSuccess>, Error<GetEffortsBySegmentIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let segment_id = params.segment_id;
    let start_date_local = params.start_date_local;
    let end_date_local = params.end_date_local;
    let per_page = params.per_page;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/segment_efforts", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("segment_id", &segment_id.to_string())]);
    if let Some(ref local_var_str) = start_date_local {
        local_var_req_builder =
            local_var_req_builder.query(&[("start_date_local", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_date_local {
        local_var_req_builder =
            local_var_req_builder.query(&[("end_date_local", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetEffortsBySegmentIdSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetEffortsBySegmentIdError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
pub async fn get_segment_effort_by_id(
    configuration: &configuration::Configuration,
    params: GetSegmentEffortByIdParams,
) -> Result<ResponseContent<GetSegmentEffortByIdSuccess>, Error<GetSegmentEffortByIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/segment_efforts/{id}",
        local_var_configuration.base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSegmentEffortByIdSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSegmentEffortByIdError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
