/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_upload`]
#[derive(Clone, Debug, Default)]
pub struct CreateUploadParams {
    /// The uploaded file.
    pub file: Option<std::path::PathBuf>,
    /// The desired name of the resulting activity.
    pub name: Option<String>,
    /// The desired description of the resulting activity.
    pub description: Option<String>,
    /// Whether the resulting activity should be marked as having been performed on a trainer.
    pub trainer: Option<String>,
    /// Whether the resulting activity should be tagged as a commute.
    pub commute: Option<String>,
    /// The format of the uploaded file.
    pub data_type: Option<String>,
    /// The desired external identifier of the resulting activity.
    pub external_id: Option<String>
}

/// struct for passing parameters to the method [`get_upload_by_id`]
#[derive(Clone, Debug, Default)]
pub struct GetUploadByIdParams {
    /// The identifier of the upload.
    pub upload_id: i64
}


/// struct for typed successes of method [`create_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUploadSuccess {
    Status201(crate::models::Upload),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_upload_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUploadByIdSuccess {
    Status200(crate::models::Upload),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUploadError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_upload_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUploadByIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}


/// Uploads a new data file to create an activity from. Requires activity:write scope.
pub async fn create_upload(configuration: &configuration::Configuration, params: CreateUploadParams) -> Result<ResponseContent<CreateUploadSuccess>, Error<CreateUploadError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let file = params.file;
    let name = params.name;
    let description = params.description;
    let trainer = params.trainer;
    let commute = params.commute;
    let data_type = params.data_type;
    let external_id = params.external_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/uploads", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    if let Some(local_var_param_value) = name {
        local_var_form = local_var_form.text("name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = description {
        local_var_form = local_var_form.text("description", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = trainer {
        local_var_form = local_var_form.text("trainer", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = commute {
        local_var_form = local_var_form.text("commute", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = data_type {
        local_var_form = local_var_form.text("data_type", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = external_id {
        local_var_form = local_var_form.text("external_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateUploadSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateUploadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns an upload for a given identifier. Requires activity:write scope.
pub async fn get_upload_by_id(configuration: &configuration::Configuration, params: GetUploadByIdParams) -> Result<ResponseContent<GetUploadByIdSuccess>, Error<GetUploadByIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let upload_id = params.upload_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/uploads/{uploadId}", local_var_configuration.base_path, uploadId=upload_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetUploadByIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetUploadByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

