/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_activity_streams`]
#[derive(Clone, Debug, Default)]
pub struct GetActivityStreamsParams {
    /// The identifier of the activity.
    pub id: i64,
    /// Desired stream types.
    pub keys: Vec<String>,
    /// Must be true.
    pub key_by_type: bool
}

/// struct for passing parameters to the method [`get_route_streams`]
#[derive(Clone, Debug, Default)]
pub struct GetRouteStreamsParams {
    /// The identifier of the route.
    pub id: i64
}

/// struct for passing parameters to the method [`get_segment_effort_streams`]
#[derive(Clone, Debug, Default)]
pub struct GetSegmentEffortStreamsParams {
    /// The identifier of the segment effort.
    pub id: i64,
    /// The types of streams to return.
    pub keys: Vec<String>,
    /// Must be true.
    pub key_by_type: bool
}

/// struct for passing parameters to the method [`get_segment_streams`]
#[derive(Clone, Debug, Default)]
pub struct GetSegmentStreamsParams {
    /// The identifier of the segment.
    pub id: i64,
    /// The types of streams to return.
    pub keys: Vec<String>,
    /// Must be true.
    pub key_by_type: bool
}


/// struct for typed successes of method [`get_activity_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetActivityStreamsSuccess {
    Status200(crate::models::StreamSet),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_route_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRouteStreamsSuccess {
    Status200(crate::models::StreamSet),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_segment_effort_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentEffortStreamsSuccess {
    Status200(crate::models::StreamSet),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_segment_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentStreamsSuccess {
    Status200(crate::models::StreamSet),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_activity_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetActivityStreamsError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_route_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRouteStreamsError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_segment_effort_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentEffortStreamsError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_segment_streams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSegmentStreamsError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}


/// Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
pub async fn get_activity_streams(configuration: &configuration::Configuration, params: GetActivityStreamsParams) -> Result<ResponseContent<GetActivityStreamsSuccess>, Error<GetActivityStreamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let keys = params.keys;
    let key_by_type = params.key_by_type;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}/streams", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("keys", &keys.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("key_by_type", &key_by_type.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetActivityStreamsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetActivityStreamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the given route's streams. Requires read_all scope for private routes.
pub async fn get_route_streams(configuration: &configuration::Configuration, params: GetRouteStreamsParams) -> Result<ResponseContent<GetRouteStreamsSuccess>, Error<GetRouteStreamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/routes/{id}/streams", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetRouteStreamsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetRouteStreamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
pub async fn get_segment_effort_streams(configuration: &configuration::Configuration, params: GetSegmentEffortStreamsParams) -> Result<ResponseContent<GetSegmentEffortStreamsSuccess>, Error<GetSegmentEffortStreamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let keys = params.keys;
    let key_by_type = params.key_by_type;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/segment_efforts/{id}/streams", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("keys", &keys.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("key_by_type", &key_by_type.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSegmentEffortStreamsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSegmentEffortStreamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the given segment's streams. Requires read_all scope for private segments.
pub async fn get_segment_streams(configuration: &configuration::Configuration, params: GetSegmentStreamsParams) -> Result<ResponseContent<GetSegmentStreamsSuccess>, Error<GetSegmentStreamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let keys = params.keys;
    let key_by_type = params.key_by_type;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/segments/{id}/streams", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("keys", &keys.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("key_by_type", &key_by_type.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetSegmentStreamsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetSegmentStreamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

