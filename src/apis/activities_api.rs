/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_activity`]
#[derive(Clone, Debug, Default)]
pub struct CreateActivityParams {
    /// The name of the activity.
    pub name: String,
    /// Type of activity. For example - Run, Ride etc.
    pub _type: String,
    /// ISO 8601 formatted date time.
    pub start_date_local: String,
    /// In seconds.
    pub elapsed_time: i32,
    /// Description of the activity.
    pub description: Option<String>,
    /// In meters.
    pub distance: Option<f32>,
    /// Set to 1 to mark as a trainer activity.
    pub trainer: Option<i32>,
    /// Set to 1 to mark as commute.
    pub commute: Option<i32>,
    /// Set to true to mute activity.
    pub hide_from_home: Option<bool>
}

/// struct for passing parameters to the method [`get_activity_by_id`]
#[derive(Clone, Debug, Default)]
pub struct GetActivityByIdParams {
    /// The identifier of the activity.
    pub id: i64,
    /// To include all segments efforts.
    pub include_all_efforts: Option<bool>
}

/// struct for passing parameters to the method [`get_comments_by_activity_id`]
#[derive(Clone, Debug, Default)]
pub struct GetCommentsByActivityIdParams {
    /// The identifier of the activity.
    pub id: i64,
    /// Page number. Defaults to 1.
    pub page: Option<i32>,
    /// Number of items per page. Defaults to 30.
    pub per_page: Option<i32>
}

/// struct for passing parameters to the method [`get_kudoers_by_activity_id`]
#[derive(Clone, Debug, Default)]
pub struct GetKudoersByActivityIdParams {
    /// The identifier of the activity.
    pub id: i64,
    /// Page number. Defaults to 1.
    pub page: Option<i32>,
    /// Number of items per page. Defaults to 30.
    pub per_page: Option<i32>
}

/// struct for passing parameters to the method [`get_laps_by_activity_id`]
#[derive(Clone, Debug, Default)]
pub struct GetLapsByActivityIdParams {
    /// The identifier of the activity.
    pub id: i64
}

/// struct for passing parameters to the method [`get_logged_in_athlete_activities`]
#[derive(Clone, Debug, Default)]
pub struct GetLoggedInAthleteActivitiesParams {
    /// An epoch timestamp to use for filtering activities that have taken place before a certain time.
    pub before: Option<i32>,
    /// An epoch timestamp to use for filtering activities that have taken place after a certain time.
    pub after: Option<i32>,
    /// Page number. Defaults to 1.
    pub page: Option<i32>,
    /// Number of items per page. Defaults to 30.
    pub per_page: Option<i32>
}

/// struct for passing parameters to the method [`get_zones_by_activity_id`]
#[derive(Clone, Debug, Default)]
pub struct GetZonesByActivityIdParams {
    /// The identifier of the activity.
    pub id: i64
}

/// struct for passing parameters to the method [`update_activity_by_id`]
#[derive(Clone, Debug, Default)]
pub struct UpdateActivityByIdParams {
    /// The identifier of the activity.
    pub id: i64,
    pub body: Option<crate::models::UpdatableActivity>
}


/// struct for typed successes of method [`create_activity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateActivitySuccess {
    Status201(crate::models::DetailedActivity),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_activity_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetActivityByIdSuccess {
    Status200(crate::models::DetailedActivity),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_comments_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCommentsByActivityIdSuccess {
    Status200(Vec<crate::models::Comment>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_kudoers_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetKudoersByActivityIdSuccess {
    Status200(Vec<crate::models::SummaryAthlete>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_laps_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLapsByActivityIdSuccess {
    Status200(Vec<crate::models::Lap>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_logged_in_athlete_activities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLoggedInAthleteActivitiesSuccess {
    Status200(Vec<crate::models::SummaryActivity>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_zones_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetZonesByActivityIdSuccess {
    Status200(Vec<crate::models::ActivityZone>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_activity_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateActivityByIdSuccess {
    Status200(crate::models::DetailedActivity),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_activity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateActivityError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_activity_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetActivityByIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_comments_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCommentsByActivityIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_kudoers_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetKudoersByActivityIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_laps_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLapsByActivityIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_logged_in_athlete_activities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLoggedInAthleteActivitiesError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_zones_by_activity_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetZonesByActivityIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_activity_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateActivityByIdError {
    DefaultResponse(crate::models::Fault),
    UnknownValue(serde_json::Value),
}


/// Creates a manual activity for an athlete, requires activity:write scope.
pub async fn create_activity(configuration: &configuration::Configuration, params: CreateActivityParams) -> Result<ResponseContent<CreateActivitySuccess>, Error<CreateActivityError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let _type = params._type;
    let start_date_local = params.start_date_local;
    let elapsed_time = params.elapsed_time;
    let description = params.description;
    let distance = params.distance;
    let trainer = params.trainer;
    let commute = params.commute;
    let hide_from_home = params.hide_from_home;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    local_var_form = local_var_form.text("name", name.to_string());
    local_var_form = local_var_form.text("type", _type.to_string());
    local_var_form = local_var_form.text("start_date_local", start_date_local.to_string());
    local_var_form = local_var_form.text("elapsed_time", elapsed_time.to_string());
    if let Some(local_var_param_value) = description {
        local_var_form = local_var_form.text("description", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = distance {
        local_var_form = local_var_form.text("distance", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = trainer {
        local_var_form = local_var_form.text("trainer", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = commute {
        local_var_form = local_var_form.text("commute", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = hide_from_home {
        local_var_form = local_var_form.text("hide_from_home", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateActivitySuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateActivityError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
pub async fn get_activity_by_id(configuration: &configuration::Configuration, params: GetActivityByIdParams) -> Result<ResponseContent<GetActivityByIdSuccess>, Error<GetActivityByIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let include_all_efforts = params.include_all_efforts;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = include_all_efforts {
        local_var_req_builder = local_var_req_builder.query(&[("include_all_efforts", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetActivityByIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetActivityByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
pub async fn get_comments_by_activity_id(configuration: &configuration::Configuration, params: GetCommentsByActivityIdParams) -> Result<ResponseContent<GetCommentsByActivityIdSuccess>, Error<GetCommentsByActivityIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let page = params.page;
    let per_page = params.per_page;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}/comments", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetCommentsByActivityIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetCommentsByActivityIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
pub async fn get_kudoers_by_activity_id(configuration: &configuration::Configuration, params: GetKudoersByActivityIdParams) -> Result<ResponseContent<GetKudoersByActivityIdSuccess>, Error<GetKudoersByActivityIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let page = params.page;
    let per_page = params.per_page;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}/kudos", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetKudoersByActivityIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetKudoersByActivityIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
pub async fn get_laps_by_activity_id(configuration: &configuration::Configuration, params: GetLapsByActivityIdParams) -> Result<ResponseContent<GetLapsByActivityIdSuccess>, Error<GetLapsByActivityIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}/laps", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetLapsByActivityIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetLapsByActivityIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
pub async fn get_logged_in_athlete_activities(configuration: &configuration::Configuration, params: GetLoggedInAthleteActivitiesParams) -> Result<ResponseContent<GetLoggedInAthleteActivitiesSuccess>, Error<GetLoggedInAthleteActivitiesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let before = params.before;
    let after = params.after;
    let page = params.page;
    let per_page = params.per_page;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/athlete/activities", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = before {
        local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetLoggedInAthleteActivitiesSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetLoggedInAthleteActivitiesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
pub async fn get_zones_by_activity_id(configuration: &configuration::Configuration, params: GetZonesByActivityIdParams) -> Result<ResponseContent<GetZonesByActivityIdSuccess>, Error<GetZonesByActivityIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}/zones", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetZonesByActivityIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetZonesByActivityIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
pub async fn update_activity_by_id(configuration: &configuration::Configuration, params: UpdateActivityByIdParams) -> Result<ResponseContent<UpdateActivityByIdSuccess>, Error<UpdateActivityByIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/activities/{id}", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateActivityByIdSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateActivityByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

