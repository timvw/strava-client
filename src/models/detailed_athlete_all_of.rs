/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DetailedAthleteAllOf {
    /// The athlete's follower count.
    #[serde(rename = "follower_count", skip_serializing_if = "Option::is_none")]
    pub follower_count: Option<i32>,
    /// The athlete's friend count.
    #[serde(rename = "friend_count", skip_serializing_if = "Option::is_none")]
    pub friend_count: Option<i32>,
    /// The athlete's preferred unit system.
    #[serde(
        rename = "measurement_preference",
        skip_serializing_if = "Option::is_none"
    )]
    pub measurement_preference: Option<MeasurementPreference>,
    /// The athlete's FTP (Functional Threshold Power).
    #[serde(rename = "ftp", skip_serializing_if = "Option::is_none")]
    pub ftp: Option<i32>,
    /// The athlete's weight.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    /// The athlete's clubs.
    #[serde(rename = "clubs", skip_serializing_if = "Option::is_none")]
    pub clubs: Option<Vec<crate::models::SummaryClub>>,
    /// The athlete's bikes.
    #[serde(rename = "bikes", skip_serializing_if = "Option::is_none")]
    pub bikes: Option<Vec<crate::models::SummaryGear>>,
    /// The athlete's shoes.
    #[serde(rename = "shoes", skip_serializing_if = "Option::is_none")]
    pub shoes: Option<Vec<crate::models::SummaryGear>>,
}

impl DetailedAthleteAllOf {
    pub fn new() -> DetailedAthleteAllOf {
        DetailedAthleteAllOf {
            follower_count: None,
            friend_count: None,
            measurement_preference: None,
            ftp: None,
            weight: None,
            clubs: None,
            bikes: None,
            shoes: None,
        }
    }
}

/// The athlete's preferred unit system.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MeasurementPreference {
    #[serde(rename = "feet")]
    Feet,
    #[serde(rename = "meters")]
    Meters,
}

impl Default for MeasurementPreference {
    fn default() -> MeasurementPreference {
        Self::Feet
    }
}
