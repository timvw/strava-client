/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SummaryAthleteAllOf {
    /// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
    #[serde(rename = "resource_state", skip_serializing_if = "Option::is_none")]
    pub resource_state: Option<i32>,
    /// The athlete's first name.
    #[serde(rename = "firstname", skip_serializing_if = "Option::is_none")]
    pub firstname: Option<String>,
    /// The athlete's last name.
    #[serde(rename = "lastname", skip_serializing_if = "Option::is_none")]
    pub lastname: Option<String>,
    /// URL to a 62x62 pixel profile picture.
    #[serde(rename = "profile_medium", skip_serializing_if = "Option::is_none")]
    pub profile_medium: Option<String>,
    /// URL to a 124x124 pixel profile picture.
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<String>,
    /// The athlete's city.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// The athlete's state or geographical region.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The athlete's country.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The athlete's sex.
    #[serde(rename = "sex", skip_serializing_if = "Option::is_none")]
    pub sex: Option<Sex>,
    /// Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
    #[serde(rename = "premium", skip_serializing_if = "Option::is_none")]
    pub premium: Option<bool>,
    /// Whether the athlete has any Summit subscription.
    #[serde(rename = "summit", skip_serializing_if = "Option::is_none")]
    pub summit: Option<bool>,
    /// The time at which the athlete was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time at which the athlete was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl SummaryAthleteAllOf {
    pub fn new() -> SummaryAthleteAllOf {
        SummaryAthleteAllOf {
            resource_state: None,
            firstname: None,
            lastname: None,
            profile_medium: None,
            profile: None,
            city: None,
            state: None,
            country: None,
            sex: None,
            premium: None,
            summit: None,
            created_at: None,
            updated_at: None,
        }
    }
}

/// The athlete's sex.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Sex {
    #[serde(rename = "M")]
    M,
    #[serde(rename = "F")]
    F,
}

impl Default for Sex {
    fn default() -> Sex {
        Self::M
    }
}

