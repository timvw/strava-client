/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DetailedClubAllOf {
    /// The membership status of the logged-in athlete.
    #[serde(rename = "membership", skip_serializing_if = "Option::is_none")]
    pub membership: Option<Membership>,
    /// Whether the currently logged-in athlete is an administrator of this club.
    #[serde(rename = "admin", skip_serializing_if = "Option::is_none")]
    pub admin: Option<bool>,
    /// Whether the currently logged-in athlete is the owner of this club.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<bool>,
    /// The number of athletes in the club that the logged-in athlete follows.
    #[serde(rename = "following_count", skip_serializing_if = "Option::is_none")]
    pub following_count: Option<i32>,
}

impl DetailedClubAllOf {
    pub fn new() -> DetailedClubAllOf {
        DetailedClubAllOf {
            membership: None,
            admin: None,
            owner: None,
            following_count: None,
        }
    }
}

/// The membership status of the logged-in athlete.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Membership {
    #[serde(rename = "member")]
    Member,
    #[serde(rename = "pending")]
    Pending,
}

impl Default for Membership {
    fn default() -> Membership {
        Self::Member
    }
}

