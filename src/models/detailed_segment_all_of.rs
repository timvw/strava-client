/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DetailedSegmentAllOf {
    /// The time at which the segment was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time at which the segment was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The segment's total elevation gain.
    #[serde(rename = "total_elevation_gain", skip_serializing_if = "Option::is_none")]
    pub total_elevation_gain: Option<f32>,
    #[serde(rename = "map", skip_serializing_if = "Option::is_none")]
    pub map: Option<Box<crate::models::PolylineMap>>,
    /// The total number of efforts for this segment
    #[serde(rename = "effort_count", skip_serializing_if = "Option::is_none")]
    pub effort_count: Option<i32>,
    /// The number of unique athletes who have an effort for this segment
    #[serde(rename = "athlete_count", skip_serializing_if = "Option::is_none")]
    pub athlete_count: Option<i32>,
    /// Whether this segment is considered hazardous
    #[serde(rename = "hazardous", skip_serializing_if = "Option::is_none")]
    pub hazardous: Option<bool>,
    /// The number of stars for this segment
    #[serde(rename = "star_count", skip_serializing_if = "Option::is_none")]
    pub star_count: Option<i32>,
}

impl DetailedSegmentAllOf {
    pub fn new() -> DetailedSegmentAllOf {
        DetailedSegmentAllOf {
            created_at: None,
            updated_at: None,
            total_elevation_gain: None,
            map: None,
            effort_count: None,
            athlete_count: None,
            hazardous: None,
            star_count: None,
        }
    }
}


