/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DetailedSegment {
    /// The unique identifier of this segment
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// The name of this segment
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "activity_type", skip_serializing_if = "Option::is_none")]
    pub activity_type: Option<ActivityType>,
    /// The segment's distance, in meters
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<f32>,
    /// The segment's average grade, in percents
    #[serde(rename = "average_grade", skip_serializing_if = "Option::is_none")]
    pub average_grade: Option<f32>,
    /// The segments's maximum grade, in percents
    #[serde(rename = "maximum_grade", skip_serializing_if = "Option::is_none")]
    pub maximum_grade: Option<f32>,
    /// The segments's highest elevation, in meters
    #[serde(rename = "elevation_high", skip_serializing_if = "Option::is_none")]
    pub elevation_high: Option<f32>,
    /// The segments's lowest elevation, in meters
    #[serde(rename = "elevation_low", skip_serializing_if = "Option::is_none")]
    pub elevation_low: Option<f32>,
    /// A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    #[serde(rename = "start_latlng", skip_serializing_if = "Option::is_none")]
    pub start_latlng: Option<Vec<f32>>,
    /// A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
    #[serde(rename = "end_latlng", skip_serializing_if = "Option::is_none")]
    pub end_latlng: Option<Vec<f32>>,
    /// The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
    #[serde(rename = "climb_category", skip_serializing_if = "Option::is_none")]
    pub climb_category: Option<i32>,
    /// The segments's city.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// The segments's state or geographical region.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The segment's country.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Whether this segment is private.
    #[serde(rename = "private", skip_serializing_if = "Option::is_none")]
    pub private: Option<bool>,
    #[serde(rename = "athlete_pr_effort", skip_serializing_if = "Option::is_none")]
    pub athlete_pr_effort: Option<Box<crate::models::SummarySegmentEffort>>,
    #[serde(rename = "athlete_segment_stats", skip_serializing_if = "Option::is_none")]
    pub athlete_segment_stats: Option<Box<crate::models::SummaryPrSegmentEffort>>,
    /// The time at which the segment was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time at which the segment was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The segment's total elevation gain.
    #[serde(rename = "total_elevation_gain", skip_serializing_if = "Option::is_none")]
    pub total_elevation_gain: Option<f32>,
    #[serde(rename = "map", skip_serializing_if = "Option::is_none")]
    pub map: Option<Box<crate::models::PolylineMap>>,
    /// The total number of efforts for this segment
    #[serde(rename = "effort_count", skip_serializing_if = "Option::is_none")]
    pub effort_count: Option<i32>,
    /// The number of unique athletes who have an effort for this segment
    #[serde(rename = "athlete_count", skip_serializing_if = "Option::is_none")]
    pub athlete_count: Option<i32>,
    /// Whether this segment is considered hazardous
    #[serde(rename = "hazardous", skip_serializing_if = "Option::is_none")]
    pub hazardous: Option<bool>,
    /// The number of stars for this segment
    #[serde(rename = "star_count", skip_serializing_if = "Option::is_none")]
    pub star_count: Option<i32>,
}

impl DetailedSegment {
    pub fn new() -> DetailedSegment {
        DetailedSegment {
            id: None,
            name: None,
            activity_type: None,
            distance: None,
            average_grade: None,
            maximum_grade: None,
            elevation_high: None,
            elevation_low: None,
            start_latlng: None,
            end_latlng: None,
            climb_category: None,
            city: None,
            state: None,
            country: None,
            private: None,
            athlete_pr_effort: None,
            athlete_segment_stats: None,
            created_at: None,
            updated_at: None,
            total_elevation_gain: None,
            map: None,
            effort_count: None,
            athlete_count: None,
            hazardous: None,
            star_count: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActivityType {
    #[serde(rename = "Ride")]
    Ride,
    #[serde(rename = "Run")]
    Run,
}

impl Default for ActivityType {
    fn default() -> ActivityType {
        Self::Ride
    }
}

